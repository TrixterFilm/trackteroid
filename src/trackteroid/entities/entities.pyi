
import typing
from .base import Entity
from ..query import Query

class ApiKey:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.identifier: str = str() 
        self.prefix: str = str() 
        self.resource_id: str = str() 


class Appointment(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.context: Context = Context 
        self.context_id: str = str() 
        self.id: str = str() 
        self.resource: Resource = Resource 
        self.resource_id: str = str() 
        self.type: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Appointment:... 
    def by_id(self, target, *ids) -> Query(Appointment):... 
    def by_metadata(self, target, *dictionaries) -> Query(Appointment):... 
    def create(self) -> Appointment:... 
    def create_batch(self, *attributes) -> Appointment:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Appointment:... 
    def get_all(self, projections=None) -> Appointment:... 
    def get_first(self, projections=None) -> Appointment:... 
    def get_inputs(self, projections=None) -> Appointment:... 
    def get_one(self, projections=None) -> Appointment:... 
    def get_outputs(self, projections=None) -> Appointment:... 
    def inject(self, filter) -> Query(Appointment):... 
    def not_by_id(self, target, *ids) -> Query(Appointment):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Appointment):... 

class Asset(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.ancestors: TypedContext = TypedContext 
        self.context_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.id: str = str() 
        self.latest_version: AssetVersion = AssetVersion 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.parent: Context = Context 
        self.project_id: str = str() 
        self.type: AssetType = AssetType 
        self.type_id: str = str() 
        self.versions: AssetVersion = AssetVersion 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Asset:... 
    def by_id(self, target, *ids) -> Query(Asset):... 
    def by_metadata(self, target, *dictionaries) -> Query(Asset):... 
    def by_name(self, target, *names) -> Query(Asset):... 
    def by_type(self, target, *types) -> Query(Asset):... 
    def create(self, name, type) -> Asset:... 
    def create_batch(self, *attributes) -> Asset:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Asset:... 
    def get_all(self, projections=None) -> Asset:... 
    def get_first(self, projections=None) -> Asset:... 
    def get_inputs(self, projections=None) -> Asset:... 
    def get_one(self, projections=None) -> Asset:... 
    def get_outputs(self, projections=None) -> Asset:... 
    def inject(self, filter) -> Query(Asset):... 
    def not_by_id(self, target, *ids) -> Query(Asset):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Asset):... 
    def not_by_name(self, target, *names) -> Query(Asset):... 
    def not_by_type(self, target, *types) -> Query(Asset):... 

class AssetBuild(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetBuild:... 
    def by_assignee(self, target, *assignees) -> Query(AssetBuild):... 
    def by_id(self, target, *ids) -> Query(AssetBuild):... 
    def by_incoming_link(self, target, *ids) -> Query(AssetBuild):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(AssetBuild):... 
    def by_metadata(self, target, *dictionaries) -> Query(AssetBuild):... 
    def by_name(self, target, *names) -> Query(AssetBuild):... 
    def by_outgoing_link(self, target, *ids) -> Query(AssetBuild):... 
    def by_state(self, target, *states) -> Query(AssetBuild):... 
    def by_status(self, target, *statuses) -> Query(AssetBuild):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(AssetBuild):... 
    def by_type(self, target, *types) -> Query(AssetBuild):... 
    def create(self) -> AssetBuild:... 
    def create_batch(self, *attributes) -> AssetBuild:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> AssetBuild:... 
    def get_all(self, projections=None) -> AssetBuild:... 
    def get_first(self, projections=None) -> AssetBuild:... 
    def get_inputs(self, projections=None) -> AssetBuild:... 
    def get_one(self, projections=None) -> AssetBuild:... 
    def get_outputs(self, projections=None) -> AssetBuild:... 
    def inject(self, filter) -> Query(AssetBuild):... 
    def link_inputs(self, entity_collection) -> AssetBuild:... 
    def link_outputs(self, entity_collection) -> AssetBuild:... 
    def not_by_assignee(self, target, *assignees) -> Query(AssetBuild):... 
    def not_by_id(self, target, *ids) -> Query(AssetBuild):... 
    def not_by_incoming_link(self, target, *ids) -> Query(AssetBuild):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(AssetBuild):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(AssetBuild):... 
    def not_by_name(self, target, *names) -> Query(AssetBuild):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(AssetBuild):... 
    def not_by_state(self, target, *states) -> Query(AssetBuild):... 
    def not_by_status(self, target, *statuses) -> Query(AssetBuild):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(AssetBuild):... 
    def not_by_type(self, target, *types) -> Query(AssetBuild):... 
    def unlink_inputs(self, entity_collection) -> AssetBuild:... 
    def unlink_outputs(self, entity_collection) -> AssetBuild:... 

class AssetCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.asset: Asset = Asset 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetCustomAttributeLink:... 

class AssetCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.asset: Asset = Asset 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetCustomAttributeLinkFrom:... 

class AssetCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetCustomAttributeValue:... 

class AssetType(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.assets: Asset = Asset 
        self.component: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.short: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetType:... 
    def by_id(self, target, *ids) -> Query(AssetType):... 
    def by_metadata(self, target, *dictionaries) -> Query(AssetType):... 
    def create(self) -> AssetType:... 
    def create_batch(self, *attributes) -> AssetType:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> AssetType:... 
    def get_all(self, projections=None) -> AssetType:... 
    def get_first(self, projections=None) -> AssetType:... 
    def get_inputs(self, projections=None) -> AssetType:... 
    def get_one(self, projections=None) -> AssetType:... 
    def get_outputs(self, projections=None) -> AssetType:... 
    def inject(self, filter) -> Query(AssetType):... 
    def not_by_id(self, target, *ids) -> Query(AssetType):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(AssetType):... 

class AssetVersion(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.asset: Asset = Asset 
        self.asset_id: str = str() 
        self.comment: str = str() 
        self.components: Component = Component 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.date: str = str() 
        self.id: str = str() 
        self.incoming_links: AssetVersionLink = AssetVersionLink 
        self.is_latest_version: bool = bool() 
        self.is_published: bool = bool() 
        self.link: str = str() 
        self.lists: AssetVersionList = AssetVersionList 
        self.metadata: typing.List = [Metadata] 
        self.notes: Note = Note 
        self.outgoing_links: AssetVersionLink = AssetVersionLink 
        self.project_id: str = str() 
        self.review_session_objects: ReviewSessionObject = ReviewSessionObject 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.task: Task = Task 
        self.task_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 
        self.used_in_versions: AssetVersion = AssetVersion 
        self.user: User = User 
        self.user_id: str = str() 
        self.uses_versions: AssetVersion = AssetVersion 
        self.version: int = int() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersion:... 
    def by_id(self, target, *ids) -> Query(AssetVersion):... 
    def by_incoming_link(self, target, *ids) -> Query(AssetVersion):... 
    def by_metadata(self, target, *dictionaries) -> Query(AssetVersion):... 
    def by_name(self, target, *names) -> Query(AssetVersion):... 
    def by_outgoing_link(self, target, *ids) -> Query(AssetVersion):... 
    def by_publish_state(self, target, publish_state) -> Query(AssetVersion):... 
    def by_publish_time(self, target, start=None, end=None) -> Query(AssetVersion):... 
    def by_publisher(self, target, *publishers) -> Query(AssetVersion):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(AssetVersion):... 
    def by_state(self, target, *states) -> Query(AssetVersion):... 
    def by_status(self, target, *statuses) -> Query(AssetVersion):... 
    def by_type(self, target, *types) -> Query(AssetVersion):... 
    def by_version(self, target, *versions) -> Query(AssetVersion):... 
    def create(self, task) -> AssetVersion:... 
    def create_batch(self, *attributes) -> AssetVersion:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> AssetVersion:... 
    def get_all(self, projections=None) -> AssetVersion:... 
    def get_first(self, projections=None) -> AssetVersion:... 
    def get_inputs(self, projections=None) -> AssetVersion:... 
    def get_one(self, projections=None) -> AssetVersion:... 
    def get_outputs(self, projections=None) -> AssetVersion:... 
    def inject(self, filter) -> Query(AssetVersion):... 
    def link_inputs(self, entity_collection) -> AssetVersion:... 
    def link_outputs(self, entity_collection) -> AssetVersion:... 
    def not_by_id(self, target, *ids) -> Query(AssetVersion):... 
    def not_by_incoming_link(self, target, *ids) -> Query(AssetVersion):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(AssetVersion):... 
    def not_by_name(self, target, *names) -> Query(AssetVersion):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(AssetVersion):... 
    def not_by_publish_state(self, target, publish_state) -> Query(AssetVersion):... 
    def not_by_publish_time(self, target, start=None, end=None) -> Query(AssetVersion):... 
    def not_by_publisher(self, target, *publishers) -> Query(AssetVersion):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(AssetVersion):... 
    def not_by_state(self, target, *states) -> Query(AssetVersion):... 
    def not_by_status(self, target, *statuses) -> Query(AssetVersion):... 
    def not_by_type(self, target, *types) -> Query(AssetVersion):... 
    def not_by_version(self, target, *versions) -> Query(AssetVersion):... 
    def unlink_inputs(self, entity_collection) -> AssetVersion:... 
    def unlink_outputs(self, entity_collection) -> AssetVersion:... 

class AssetVersionCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.asset_version: AssetVersion = AssetVersion 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionCustomAttributeLink:... 

class AssetVersionCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.asset_version: AssetVersion = AssetVersion 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionCustomAttributeLinkFrom:... 

class AssetVersionCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionCustomAttributeValue:... 

class AssetVersionLink(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.from: AssetVersion = AssetVersion 
        self.from_id: str = str() 
        self.id: str = str() 
        self.metadata: typing.List = [Metadata] 
        self.to: AssetVersion = AssetVersion 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionLink:... 
    def by_id(self, target, *ids) -> Query(AssetVersionLink):... 
    def by_metadata(self, target, *dictionaries) -> Query(AssetVersionLink):... 
    def create(self) -> AssetVersionLink:... 
    def create_batch(self, *attributes) -> AssetVersionLink:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> AssetVersionLink:... 
    def get_all(self, projections=None) -> AssetVersionLink:... 
    def get_first(self, projections=None) -> AssetVersionLink:... 
    def get_inputs(self, projections=None) -> AssetVersionLink:... 
    def get_one(self, projections=None) -> AssetVersionLink:... 
    def get_outputs(self, projections=None) -> AssetVersionLink:... 
    def inject(self, filter) -> Query(AssetVersionLink):... 
    def not_by_id(self, target, *ids) -> Query(AssetVersionLink):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(AssetVersionLink):... 

class AssetVersionList(List):
    def __init__(self, *args, **kwargs) -> None: 
        self.category: ListCategory = ListCategory 
        self.category_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.date: str = str() 
        self.id: str = str() 
        self.is_open: bool = bool() 
        self.items: AssetVersion = AssetVersion 
        self.name: str = str() 
        self.owner: User = User 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.system_type: str = str() 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionList:... 
    def by_id(self, target, *ids) -> Query(AssetVersionList):... 
    def by_metadata(self, target, *dictionaries) -> Query(AssetVersionList):... 
    def by_name(self, target, *names) -> Query(AssetVersionList):... 
    def create(self, task) -> AssetVersionList:... 
    def create_batch(self, *attributes) -> AssetVersionList:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> AssetVersionList:... 
    def get_all(self, projections=None) -> AssetVersionList:... 
    def get_first(self, projections=None) -> AssetVersionList:... 
    def get_inputs(self, projections=None) -> AssetVersionList:... 
    def get_one(self, projections=None) -> AssetVersionList:... 
    def get_outputs(self, projections=None) -> AssetVersionList:... 
    def inject(self, filter) -> Query(AssetVersionList):... 
    def not_by_id(self, target, *ids) -> Query(AssetVersionList):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(AssetVersionList):... 
    def not_by_name(self, target, *names) -> Query(AssetVersionList):... 

class AssetVersionStatusChange:
    def __init__(self, *args, **kwargs) -> None: 
        self.date: str = str() 
        self.from_status: Status = Status 
        self.from_status_id: str = str() 
        self.id: str = str() 
        self.parent: AssetVersion = AssetVersion 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> AssetVersionStatusChange:... 

class AssetVersionStatusRuleGroup:
    def __init__(self, *args, **kwargs) -> None: 
        self.entity_type: str = str() 
        self.id: str = str() 
        self.role: SecurityRole = SecurityRole 
        self.role_id: str = str() 
        self.schema: ProjectSchema = ProjectSchema 
        self.schema_id: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.status_rules: StatusRule = StatusRule 


class BaseUser:
    def __init__(self, *args, **kwargs) -> None: 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assignments: Appointment = Appointment 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.email: str = str() 
        self.first_name: str = str() 
        self.id: str = str() 
        self.last_name: str = str() 
        self.resource_type: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 


class CalendarEvent:
    def __init__(self, *args, **kwargs) -> None: 
        self.calendar_event_resources: CalendarEventResource = CalendarEventResource 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.effort: float = float() 
        self.end: str = str() 
        self.estimate: float = float() 
        self.everyone: bool = bool() 
        self.forecast: bool = bool() 
        self.id: str = str() 
        self.leave: bool = bool() 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.start: str = str() 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CalendarEvent:... 

class CalendarEventResource:
    def __init__(self, *args, **kwargs) -> None: 
        self.calendar_event: CalendarEvent = CalendarEvent 
        self.calendar_event_id: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.id: str = str() 
        self.resource: Resource = Resource 
        self.resource_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CalendarEventResource:... 

class Collaborator:
    def __init__(self, *args, **kwargs) -> None: 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assignments: Appointment = Appointment 
        self.created_from_shared_url: str = str() 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.email: str = str() 
        self.first_name: str = str() 
        self.id: str = str() 
        self.last_name: str = str() 
        self.resource_type: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 


class Component(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.component_locations: ComponentLocation = ComponentLocation 
        self.container: ContainerComponent = ContainerComponent 
        self.container_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.file_type: str = str() 
        self.id: str = str() 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.size: int = int() 
        self.system_type: str = str() 
        self.version: AssetVersion = AssetVersion 
        self.version_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Component:... 
    def by_file_type(self, target, *file_types) -> Query(Component):... 
    def by_id(self, target, *ids) -> Query(Component):... 
    def by_location(self, target, *component_locations) -> Query(Component):... 
    def by_metadata(self, target, *dictionaries) -> Query(Component):... 
    def by_name(self, target, *names) -> Query(Component):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(Component):... 
    def by_size(self, target, minimum=0, maximum=0) -> Query(Component):... 
    def by_system_type(self, target, *system_types) -> Query(Component):... 
    def by_version(self, target, *versions) -> Query(Component):... 
    def create(self) -> Component:... 
    def create_batch(self, *attributes) -> Component:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Component:... 
    def get_all(self, projections=None) -> Component:... 
    def get_first(self, projections=None) -> Component:... 
    def get_inputs(self, projections=None) -> Component:... 
    def get_one(self, projections=None) -> Component:... 
    def get_outputs(self, projections=None) -> Component:... 
    def inject(self, filter) -> Query(Component):... 
    def not_by_file_type(self, target, *file_types) -> Query(Component):... 
    def not_by_id(self, target, *ids) -> Query(Component):... 
    def not_by_location(self, target, *component_locations) -> Query(Component):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Component):... 
    def not_by_name(self, target, *names) -> Query(Component):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(Component):... 
    def not_by_size(self, target, minimum=0, maximum=0) -> Query(Component):... 
    def not_by_system_type(self, target, *system_types) -> Query(Component):... 
    def not_by_version(self, target, *versions) -> Query(Component):... 

class ComponentCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ComponentCustomAttributeLink:... 

class ComponentCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ComponentCustomAttributeLinkFrom:... 

class ComponentLocation(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.id: str = str() 
        self.location: Location = Location 
        self.location_id: str = str() 
        self.resource_identifier: str = str() 
        self.url: object 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ComponentLocation:... 
    def by_id(self, target, *ids) -> Query(ComponentLocation):... 
    def by_metadata(self, target, *dictionaries) -> Query(ComponentLocation):... 
    def by_name(self, target, *names) -> Query(ComponentLocation):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(ComponentLocation):... 
    def by_version(self, target, *versions) -> Query(ComponentLocation):... 
    def create(self) -> ComponentLocation:... 
    def create_batch(self, *attributes) -> ComponentLocation:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ComponentLocation:... 
    def get_all(self, projections=None) -> ComponentLocation:... 
    def get_first(self, projections=None) -> ComponentLocation:... 
    def get_inputs(self, projections=None) -> ComponentLocation:... 
    def get_one(self, projections=None) -> ComponentLocation:... 
    def get_outputs(self, projections=None) -> ComponentLocation:... 
    def inject(self, filter) -> Query(ComponentLocation):... 
    def not_by_id(self, target, *ids) -> Query(ComponentLocation):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ComponentLocation):... 
    def not_by_name(self, target, *names) -> Query(ComponentLocation):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(ComponentLocation):... 
    def not_by_version(self, target, *versions) -> Query(ComponentLocation):... 

class ContainerComponent(Component):
    def __init__(self, *args, **kwargs) -> None: 
        self.component_locations: ComponentLocation = ComponentLocation 
        self.container: ContainerComponent = ContainerComponent 
        self.container_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.file_type: str = str() 
        self.id: str = str() 
        self.members: Component = Component 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.size: int = int() 
        self.system_type: str = str() 
        self.version: AssetVersion = AssetVersion 
        self.version_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ContainerComponent:... 
    def by_file_type(self, target, *file_types) -> Query(ContainerComponent):... 
    def by_id(self, target, *ids) -> Query(ContainerComponent):... 
    def by_location(self, target, *component_locations) -> Query(ContainerComponent):... 
    def by_metadata(self, target, *dictionaries) -> Query(ContainerComponent):... 
    def by_name(self, target, *names) -> Query(ContainerComponent):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(ContainerComponent):... 
    def by_size(self, target, minimum=0, maximum=0) -> Query(ContainerComponent):... 
    def by_system_type(self, target, *system_types) -> Query(ContainerComponent):... 
    def by_version(self, target, *versions) -> Query(ContainerComponent):... 
    def create(self) -> ContainerComponent:... 
    def create_batch(self, *attributes) -> ContainerComponent:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ContainerComponent:... 
    def get_all(self, projections=None) -> ContainerComponent:... 
    def get_first(self, projections=None) -> ContainerComponent:... 
    def get_inputs(self, projections=None) -> ContainerComponent:... 
    def get_one(self, projections=None) -> ContainerComponent:... 
    def get_outputs(self, projections=None) -> ContainerComponent:... 
    def inject(self, filter) -> Query(ContainerComponent):... 
    def not_by_file_type(self, target, *file_types) -> Query(ContainerComponent):... 
    def not_by_id(self, target, *ids) -> Query(ContainerComponent):... 
    def not_by_location(self, target, *component_locations) -> Query(ContainerComponent):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ContainerComponent):... 
    def not_by_name(self, target, *names) -> Query(ContainerComponent):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(ContainerComponent):... 
    def not_by_size(self, target, minimum=0, maximum=0) -> Query(ContainerComponent):... 
    def not_by_system_type(self, target, *system_types) -> Query(ContainerComponent):... 
    def not_by_version(self, target, *versions) -> Query(ContainerComponent):... 

class Context(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.id: str = str() 
        self.link: str = str() 
        self.managers: Manager = Manager 
        self.name: str = str() 
        self.notes: Note = Note 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 
        self.timelogs: Timelog = Timelog 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Context:... 
    def by_id(self, target, *ids) -> Query(Context):... 
    def by_metadata(self, target, *dictionaries) -> Query(Context):... 
    def create(self) -> Context:... 
    def create_batch(self, *attributes) -> Context:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Context:... 
    def get_all(self, projections=None) -> Context:... 
    def get_first(self, projections=None) -> Context:... 
    def get_inputs(self, projections=None) -> Context:... 
    def get_one(self, projections=None) -> Context:... 
    def get_outputs(self, projections=None) -> Context:... 
    def inject(self, filter) -> Query(Context):... 
    def not_by_id(self, target, *ids) -> Query(Context):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Context):... 

class ContextCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.context: Context = Context 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ContextCustomAttributeLink:... 

class ContextCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.context: Context = Context 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ContextCustomAttributeLinkFrom:... 

class ContextCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ContextCustomAttributeValue:... 

class CustomAttributeConfiguration:
    def __init__(self, *args, **kwargs) -> None: 
        self.config: str = str() 
        self.core: bool = bool() 
        self.default: typing.Any = None 
        self.entity_type: str = str() 
        self.group: CustomAttributeGroup = CustomAttributeGroup 
        self.group_id: str = str() 
        self.id: str = str() 
        self.is_hierarchical: bool = bool() 
        self.key: str = str() 
        self.label: str = str() 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.project_id: str = str() 
        self.read_security_roles: SecurityRole = SecurityRole 
        self.sort: int = int() 
        self.type: CustomAttributeType = CustomAttributeType 
        self.type_id: str = str() 
        self.values: CustomAttributeValue = CustomAttributeValue 
        self.write_security_roles: SecurityRole = SecurityRole 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeConfiguration:... 

class CustomAttributeGroup:
    def __init__(self, *args, **kwargs) -> None: 
        self.custom_attribute_configurations: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.id: str = str() 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeGroup:... 

class CustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeLink:... 

class CustomAttributeLinkConfiguration:
    def __init__(self, *args, **kwargs) -> None: 
        self.config: str = str() 
        self.core: bool = bool() 
        self.entity_type: str = str() 
        self.entity_type_to: str = str() 
        self.group: CustomAttributeGroup = CustomAttributeGroup 
        self.group_id: str = str() 
        self.id: str = str() 
        self.key: str = str() 
        self.label: str = str() 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.object_type_id_to: str = str() 
        self.object_type_to: ObjectType = ObjectType 
        self.one_to_one: bool = bool() 
        self.project_id: str = str() 
        self.read_security_roles: SecurityRole = SecurityRole 
        self.sort: int = int() 
        self.write_security_roles: SecurityRole = SecurityRole 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeLinkConfiguration:... 

class CustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeLinkFrom:... 

class CustomAttributeType:
    def __init__(self, *args, **kwargs) -> None: 
        self.core: bool = bool() 
        self.custom_attribute_configurations: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.form_config: str = str() 
        self.id: str = str() 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeType:... 

class CustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomAttributeValue:... 

class CustomConfigurationBase:
    def __init__(self, *args, **kwargs) -> None: 
        self.config: str = str() 
        self.core: bool = bool() 
        self.entity_type: str = str() 
        self.group: CustomAttributeGroup = CustomAttributeGroup 
        self.group_id: str = str() 
        self.id: str = str() 
        self.key: str = str() 
        self.label: str = str() 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.project_id: str = str() 
        self.read_security_roles: SecurityRole = SecurityRole 
        self.sort: int = int() 
        self.write_security_roles: SecurityRole = SecurityRole 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> CustomConfigurationBase:... 

class Dashboard:
    def __init__(self, *args, **kwargs) -> None: 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.id: str = str() 
        self.is_shared_with_everyone: bool = bool() 
        self.name: str = str() 
        self.widgets: DashboardWidget = DashboardWidget 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Dashboard:... 

class DashboardResource:
    def __init__(self, *args, **kwargs) -> None: 
        self.dashboard: Dashboard = Dashboard 
        self.dashboard_id: str = str() 
        self.resource: Resource = Resource 
        self.resource_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> DashboardResource:... 

class DashboardWidget:
    def __init__(self, *args, **kwargs) -> None: 
        self.config: str = str() 
        self.dashboard: Dashboard = Dashboard 
        self.dashboard_id: str = str() 
        self.id: str = str() 
        self.sort: float = float() 
        self.type: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> DashboardWidget:... 

class Disk:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.projects: Project = Project 
        self.unix: str = str() 
        self.windows: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Disk:... 

class EntitySetting(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.group: str = str() 
        self.name: str = str() 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.value: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> EntitySetting:... 
    def by_id(self, target, *ids) -> Query(EntitySetting):... 
    def by_metadata(self, target, *dictionaries) -> Query(EntitySetting):... 
    def create(self) -> EntitySetting:... 
    def create_batch(self, *attributes) -> EntitySetting:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> EntitySetting:... 
    def get_all(self, projections=None) -> EntitySetting:... 
    def get_first(self, projections=None) -> EntitySetting:... 
    def get_inputs(self, projections=None) -> EntitySetting:... 
    def get_one(self, projections=None) -> EntitySetting:... 
    def get_outputs(self, projections=None) -> EntitySetting:... 
    def inject(self, filter) -> Query(EntitySetting):... 
    def not_by_id(self, target, *ids) -> Query(EntitySetting):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(EntitySetting):... 

class Episode(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Episode:... 
    def by_assignee(self, target, *assignees) -> Query(Episode):... 
    def by_id(self, target, *ids) -> Query(Episode):... 
    def by_incoming_link(self, target, *ids) -> Query(Episode):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Episode):... 
    def by_metadata(self, target, *dictionaries) -> Query(Episode):... 
    def by_name(self, target, *names) -> Query(Episode):... 
    def by_outgoing_link(self, target, *ids) -> Query(Episode):... 
    def by_state(self, target, *states) -> Query(Episode):... 
    def by_status(self, target, *statuses) -> Query(Episode):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Episode):... 
    def by_type(self, target, *types) -> Query(Episode):... 
    def create(self) -> Episode:... 
    def create_batch(self, *attributes) -> Episode:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Episode:... 
    def get_all(self, projections=None) -> Episode:... 
    def get_first(self, projections=None) -> Episode:... 
    def get_inputs(self, projections=None) -> Episode:... 
    def get_one(self, projections=None) -> Episode:... 
    def get_outputs(self, projections=None) -> Episode:... 
    def inject(self, filter) -> Query(Episode):... 
    def link_inputs(self, entity_collection) -> Episode:... 
    def link_outputs(self, entity_collection) -> Episode:... 
    def not_by_assignee(self, target, *assignees) -> Query(Episode):... 
    def not_by_id(self, target, *ids) -> Query(Episode):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Episode):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Episode):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Episode):... 
    def not_by_name(self, target, *names) -> Query(Episode):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Episode):... 
    def not_by_state(self, target, *states) -> Query(Episode):... 
    def not_by_status(self, target, *statuses) -> Query(Episode):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Episode):... 
    def not_by_type(self, target, *types) -> Query(Episode):... 
    def unlink_inputs(self, entity_collection) -> Episode:... 
    def unlink_outputs(self, entity_collection) -> Episode:... 

class Event(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.action: str = str() 
        self.created_at: str = str() 
        self.data: str = str() 
        self.feeds: Feed = Feed 
        self.id: int = int() 
        self.insert: str = str() 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Event:... 
    def by_action(self, target, *actions) -> Query(Event):... 
    def by_data(self, target, *datas) -> Query(Event):... 
    def by_id(self, target, *ids) -> Query(Event):... 
    def by_metadata(self, target, *dictionaries) -> Query(Event):... 
    def by_name(self, target, *names) -> Query(Event):... 
    def create(self) -> Event:... 
    def create_batch(self, *attributes) -> Event:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Event:... 
    def get_all(self, projections=None) -> Event:... 
    def get_first(self, projections=None) -> Event:... 
    def get_inputs(self, projections=None) -> Event:... 
    def get_one(self, projections=None) -> Event:... 
    def get_outputs(self, projections=None) -> Event:... 
    def inject(self, filter) -> Query(Event):... 
    def not_by_action(self, target, *actions) -> Query(Event):... 
    def not_by_data(self, target, *datas) -> Query(Event):... 
    def not_by_id(self, target, *ids) -> Query(Event):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Event):... 
    def not_by_name(self, target, *names) -> Query(Event):... 

class Feed:
    def __init__(self, *args, **kwargs) -> None: 
        self.cluster_id: str = str() 
        self.created_at: str = str() 
        self.distance: int = int() 
        self.event: Event = Event 
        self.id: str = str() 
        self.owner_id: str = str() 
        self.relation: str = str() 
        self.social_id: int = int() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Feed:... 

class FileComponent(Component):
    def __init__(self, *args, **kwargs) -> None: 
        self.component_locations: ComponentLocation = ComponentLocation 
        self.container: ContainerComponent = ContainerComponent 
        self.container_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.file_type: str = str() 
        self.id: str = str() 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.size: int = int() 
        self.system_type: str = str() 
        self.version: AssetVersion = AssetVersion 
        self.version_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> FileComponent:... 
    def by_file_type(self, target, *file_types) -> Query(FileComponent):... 
    def by_id(self, target, *ids) -> Query(FileComponent):... 
    def by_location(self, target, *component_locations) -> Query(FileComponent):... 
    def by_metadata(self, target, *dictionaries) -> Query(FileComponent):... 
    def by_name(self, target, *names) -> Query(FileComponent):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(FileComponent):... 
    def by_size(self, target, minimum=0, maximum=0) -> Query(FileComponent):... 
    def by_system_type(self, target, *system_types) -> Query(FileComponent):... 
    def by_version(self, target, *versions) -> Query(FileComponent):... 
    def create(self) -> FileComponent:... 
    def create_batch(self, *attributes) -> FileComponent:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> FileComponent:... 
    def get_all(self, projections=None) -> FileComponent:... 
    def get_first(self, projections=None) -> FileComponent:... 
    def get_inputs(self, projections=None) -> FileComponent:... 
    def get_one(self, projections=None) -> FileComponent:... 
    def get_outputs(self, projections=None) -> FileComponent:... 
    def inject(self, filter) -> Query(FileComponent):... 
    def not_by_file_type(self, target, *file_types) -> Query(FileComponent):... 
    def not_by_id(self, target, *ids) -> Query(FileComponent):... 
    def not_by_location(self, target, *component_locations) -> Query(FileComponent):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(FileComponent):... 
    def not_by_name(self, target, *names) -> Query(FileComponent):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(FileComponent):... 
    def not_by_size(self, target, minimum=0, maximum=0) -> Query(FileComponent):... 
    def not_by_system_type(self, target, *system_types) -> Query(FileComponent):... 
    def not_by_version(self, target, *versions) -> Query(FileComponent):... 

class Folder(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Folder:... 
    def by_assignee(self, target, *assignees) -> Query(Folder):... 
    def by_id(self, target, *ids) -> Query(Folder):... 
    def by_incoming_link(self, target, *ids) -> Query(Folder):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Folder):... 
    def by_metadata(self, target, *dictionaries) -> Query(Folder):... 
    def by_name(self, target, *names) -> Query(Folder):... 
    def by_outgoing_link(self, target, *ids) -> Query(Folder):... 
    def by_state(self, target, *states) -> Query(Folder):... 
    def by_status(self, target, *statuses) -> Query(Folder):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Folder):... 
    def by_type(self, target, *types) -> Query(Folder):... 
    def create(self) -> Folder:... 
    def create_batch(self, *attributes) -> Folder:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Folder:... 
    def get_all(self, projections=None) -> Folder:... 
    def get_first(self, projections=None) -> Folder:... 
    def get_inputs(self, projections=None) -> Folder:... 
    def get_one(self, projections=None) -> Folder:... 
    def get_outputs(self, projections=None) -> Folder:... 
    def inject(self, filter) -> Query(Folder):... 
    def link_inputs(self, entity_collection) -> Folder:... 
    def link_outputs(self, entity_collection) -> Folder:... 
    def not_by_assignee(self, target, *assignees) -> Query(Folder):... 
    def not_by_id(self, target, *ids) -> Query(Folder):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Folder):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Folder):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Folder):... 
    def not_by_name(self, target, *names) -> Query(Folder):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Folder):... 
    def not_by_state(self, target, *states) -> Query(Folder):... 
    def not_by_status(self, target, *statuses) -> Query(Folder):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Folder):... 
    def not_by_type(self, target, *types) -> Query(Folder):... 
    def unlink_inputs(self, entity_collection) -> Folder:... 
    def unlink_outputs(self, entity_collection) -> Folder:... 

class Group(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assignments: Appointment = Appointment 
        self.children: Group = Group 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.id: str = str() 
        self.link: str = str() 
        self.local: bool = bool() 
        self.memberships: Membership = Membership 
        self.name: str = str() 
        self.parent: Group = Group 
        self.parent_id: str = str() 
        self.resource_type: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Group:... 
    def by_id(self, target, *ids) -> Query(Group):... 
    def by_metadata(self, target, *dictionaries) -> Query(Group):... 
    def by_name(self, target, *names) -> Query(Group):... 
    def create(self) -> Group:... 
    def create_batch(self, *attributes) -> Group:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Group:... 
    def get_all(self, projections=None) -> Group:... 
    def get_first(self, projections=None) -> Group:... 
    def get_inputs(self, projections=None) -> Group:... 
    def get_one(self, projections=None) -> Group:... 
    def get_outputs(self, projections=None) -> Group:... 
    def inject(self, filter) -> Query(Group):... 
    def not_by_id(self, target, *ids) -> Query(Group):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Group):... 
    def not_by_name(self, target, *names) -> Query(Group):... 

class GroupCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.group: Group = Group 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> GroupCustomAttributeLink:... 

class GroupCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.group: Group = Group 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> GroupCustomAttributeLinkFrom:... 

class Image(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Image:... 
    def by_assignee(self, target, *assignees) -> Query(Image):... 
    def by_id(self, target, *ids) -> Query(Image):... 
    def by_incoming_link(self, target, *ids) -> Query(Image):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Image):... 
    def by_metadata(self, target, *dictionaries) -> Query(Image):... 
    def by_name(self, target, *names) -> Query(Image):... 
    def by_outgoing_link(self, target, *ids) -> Query(Image):... 
    def by_state(self, target, *states) -> Query(Image):... 
    def by_status(self, target, *statuses) -> Query(Image):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Image):... 
    def by_type(self, target, *types) -> Query(Image):... 
    def create(self) -> Image:... 
    def create_batch(self, *attributes) -> Image:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Image:... 
    def get_all(self, projections=None) -> Image:... 
    def get_first(self, projections=None) -> Image:... 
    def get_inputs(self, projections=None) -> Image:... 
    def get_one(self, projections=None) -> Image:... 
    def get_outputs(self, projections=None) -> Image:... 
    def inject(self, filter) -> Query(Image):... 
    def link_inputs(self, entity_collection) -> Image:... 
    def link_outputs(self, entity_collection) -> Image:... 
    def not_by_assignee(self, target, *assignees) -> Query(Image):... 
    def not_by_id(self, target, *ids) -> Query(Image):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Image):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Image):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Image):... 
    def not_by_name(self, target, *names) -> Query(Image):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Image):... 
    def not_by_state(self, target, *states) -> Query(Image):... 
    def not_by_status(self, target, *statuses) -> Query(Image):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Image):... 
    def not_by_type(self, target, *types) -> Query(Image):... 
    def unlink_inputs(self, entity_collection) -> Image:... 
    def unlink_outputs(self, entity_collection) -> Image:... 

class Information(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Information:... 
    def by_assignee(self, target, *assignees) -> Query(Information):... 
    def by_id(self, target, *ids) -> Query(Information):... 
    def by_incoming_link(self, target, *ids) -> Query(Information):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Information):... 
    def by_metadata(self, target, *dictionaries) -> Query(Information):... 
    def by_name(self, target, *names) -> Query(Information):... 
    def by_outgoing_link(self, target, *ids) -> Query(Information):... 
    def by_state(self, target, *states) -> Query(Information):... 
    def by_status(self, target, *statuses) -> Query(Information):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Information):... 
    def by_type(self, target, *types) -> Query(Information):... 
    def create(self) -> Information:... 
    def create_batch(self, *attributes) -> Information:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Information:... 
    def get_all(self, projections=None) -> Information:... 
    def get_first(self, projections=None) -> Information:... 
    def get_inputs(self, projections=None) -> Information:... 
    def get_one(self, projections=None) -> Information:... 
    def get_outputs(self, projections=None) -> Information:... 
    def inject(self, filter) -> Query(Information):... 
    def link_inputs(self, entity_collection) -> Information:... 
    def link_outputs(self, entity_collection) -> Information:... 
    def not_by_assignee(self, target, *assignees) -> Query(Information):... 
    def not_by_id(self, target, *ids) -> Query(Information):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Information):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Information):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Information):... 
    def not_by_name(self, target, *names) -> Query(Information):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Information):... 
    def not_by_state(self, target, *states) -> Query(Information):... 
    def not_by_status(self, target, *statuses) -> Query(Information):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Information):... 
    def not_by_type(self, target, *types) -> Query(Information):... 
    def unlink_inputs(self, entity_collection) -> Information:... 
    def unlink_outputs(self, entity_collection) -> Information:... 

class Job(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.created_at: str = str() 
        self.data: str = str() 
        self.finished_at: str = str() 
        self.id: str = str() 
        self.job_components: JobComponent = JobComponent 
        self.status: str = str() 
        self.type: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Job:... 
    def by_creation_date(self, target, creation_date) -> Query(Job):... 
    def by_data(self, target, *dictionaries) -> Query(Job):... 
    def by_finish_date(self, target, finish_date) -> Query(Job):... 
    def by_id(self, target, *ids) -> Query(Job):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Job):... 
    def by_metadata(self, target, *dictionaries) -> Query(Job):... 
    def by_name(self, target, *names) -> Query(Job):... 
    def by_status(self, target, *status) -> Query(Job):... 
    def create(self) -> Job:... 
    def create_batch(self, *attributes) -> Job:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Job:... 
    def get_all(self, projections=None) -> Job:... 
    def get_first(self, projections=None) -> Job:... 
    def get_inputs(self, projections=None) -> Job:... 
    def get_one(self, projections=None) -> Job:... 
    def get_outputs(self, projections=None) -> Job:... 
    def inject(self, filter) -> Query(Job):... 
    def not_by_creation_date(self, target, creation_date) -> Query(Job):... 
    def not_by_data(self, target, *dictionaries) -> Query(Job):... 
    def not_by_finish_date(self, target, finish_date) -> Query(Job):... 
    def not_by_id(self, target, *ids) -> Query(Job):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Job):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Job):... 
    def not_by_name(self, target, *names) -> Query(Job):... 
    def not_by_status(self, target, *status) -> Query(Job):... 

class JobComponent:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.job: Job = Job 
        self.job_id: str = str() 
        self.url: object 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> JobComponent:... 

class List(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.category: ListCategory = ListCategory 
        self.category_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.date: str = str() 
        self.id: str = str() 
        self.is_open: bool = bool() 
        self.name: str = str() 
        self.owner: User = User 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.system_type: str = str() 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> List:... 
    def by_id(self, target, *ids) -> Query(List):... 
    def by_metadata(self, target, *dictionaries) -> Query(List):... 
    def by_name(self, target, *names) -> Query(List):... 
    def create(self) -> List:... 
    def create_batch(self, *attributes) -> List:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> List:... 
    def get_all(self, projections=None) -> List:... 
    def get_first(self, projections=None) -> List:... 
    def get_inputs(self, projections=None) -> List:... 
    def get_one(self, projections=None) -> List:... 
    def get_outputs(self, projections=None) -> List:... 
    def inject(self, filter) -> Query(List):... 
    def not_by_id(self, target, *ids) -> Query(List):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(List):... 
    def not_by_name(self, target, *names) -> Query(List):... 

class ListCategory(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.lists: List = List 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListCategory:... 
    def by_id(self, target, *ids) -> Query(ListCategory):... 
    def by_metadata(self, target, *dictionaries) -> Query(ListCategory):... 
    def by_name(self, target, *names) -> Query(ListCategory):... 
    def create(self) -> ListCategory:... 
    def create_batch(self, *attributes) -> ListCategory:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ListCategory:... 
    def get_all(self, projections=None) -> ListCategory:... 
    def get_first(self, projections=None) -> ListCategory:... 
    def get_inputs(self, projections=None) -> ListCategory:... 
    def get_one(self, projections=None) -> ListCategory:... 
    def get_outputs(self, projections=None) -> ListCategory:... 
    def inject(self, filter) -> Query(ListCategory):... 
    def not_by_id(self, target, *ids) -> Query(ListCategory):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ListCategory):... 
    def not_by_name(self, target, *names) -> Query(ListCategory):... 

class ListCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.list: List = List 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListCustomAttributeLink:... 

class ListCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.list: List = List 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListCustomAttributeLinkFrom:... 

class ListCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListCustomAttributeValue:... 

class ListObject:
    def __init__(self, *args, **kwargs) -> None: 
        self.entity_id: str = str() 
        self.id: str = str() 
        self.list: List = List 
        self.list_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListObject:... 

class ListObjectCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ListObjectCustomAttributeValue:... 

class Location(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.description: str = str() 
        self.id: str = str() 
        self.label: str = str() 
        self.location_components: ComponentLocation = ComponentLocation 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Location:... 
    def by_id(self, target, *ids) -> Query(Location):... 
    def by_metadata(self, target, *dictionaries) -> Query(Location):... 
    def by_name(self, target, *names) -> Query(Location):... 
    def create(self) -> Location:... 
    def create_batch(self, *attributes) -> Location:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Location:... 
    def get_all(self, projections=None) -> Location:... 
    def get_first(self, projections=None) -> Location:... 
    def get_inputs(self, projections=None) -> Location:... 
    def get_one(self, projections=None) -> Location:... 
    def get_outputs(self, projections=None) -> Location:... 
    def inject(self, filter) -> Query(Location):... 
    def not_by_id(self, target, *ids) -> Query(Location):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Location):... 
    def not_by_name(self, target, *names) -> Query(Location):... 

class Manager:
    def __init__(self, *args, **kwargs) -> None: 
        self.context: Context = Context 
        self.context_id: str = str() 
        self.id: str = str() 
        self.type: ManagerType = ManagerType 
        self.type_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Manager:... 

class ManagerType:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ManagerType:... 

class Membership(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.group: Group = Group 
        self.group_id: str = str() 
        self.id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Membership:... 
    def by_id(self, target, *ids) -> Query(Membership):... 
    def by_metadata(self, target, *dictionaries) -> Query(Membership):... 
    def create(self) -> Membership:... 
    def create_batch(self, *attributes) -> Membership:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Membership:... 
    def get_all(self, projections=None) -> Membership:... 
    def get_first(self, projections=None) -> Membership:... 
    def get_inputs(self, projections=None) -> Membership:... 
    def get_one(self, projections=None) -> Membership:... 
    def get_outputs(self, projections=None) -> Membership:... 
    def inject(self, filter) -> Query(Membership):... 
    def not_by_id(self, target, *ids) -> Query(Membership):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Membership):... 

class Metadata(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.key: str = str() 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.value: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Metadata:... 
    def by_id(self, target, *ids) -> Query(Metadata):... 
    def by_metadata(self, target, *dictionaries) -> Query(Metadata):... 
    def create(self) -> Metadata:... 
    def create_batch(self, *attributes) -> Metadata:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Metadata:... 
    def get_all(self, projections=None) -> Metadata:... 
    def get_first(self, projections=None) -> Metadata:... 
    def get_inputs(self, projections=None) -> Metadata:... 
    def get_one(self, projections=None) -> Metadata:... 
    def get_outputs(self, projections=None) -> Metadata:... 
    def inject(self, filter) -> Query(Metadata):... 
    def not_by_id(self, target, *ids) -> Query(Metadata):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Metadata):... 

class Milestone(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Milestone:... 
    def by_assignee(self, target, *assignees) -> Query(Milestone):... 
    def by_id(self, target, *ids) -> Query(Milestone):... 
    def by_incoming_link(self, target, *ids) -> Query(Milestone):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Milestone):... 
    def by_metadata(self, target, *dictionaries) -> Query(Milestone):... 
    def by_name(self, target, *names) -> Query(Milestone):... 
    def by_outgoing_link(self, target, *ids) -> Query(Milestone):... 
    def by_state(self, target, *states) -> Query(Milestone):... 
    def by_status(self, target, *statuses) -> Query(Milestone):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Milestone):... 
    def by_type(self, target, *types) -> Query(Milestone):... 
    def create(self) -> Milestone:... 
    def create_batch(self, *attributes) -> Milestone:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Milestone:... 
    def get_all(self, projections=None) -> Milestone:... 
    def get_first(self, projections=None) -> Milestone:... 
    def get_inputs(self, projections=None) -> Milestone:... 
    def get_one(self, projections=None) -> Milestone:... 
    def get_outputs(self, projections=None) -> Milestone:... 
    def inject(self, filter) -> Query(Milestone):... 
    def link_inputs(self, entity_collection) -> Milestone:... 
    def link_outputs(self, entity_collection) -> Milestone:... 
    def not_by_assignee(self, target, *assignees) -> Query(Milestone):... 
    def not_by_id(self, target, *ids) -> Query(Milestone):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Milestone):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Milestone):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Milestone):... 
    def not_by_name(self, target, *names) -> Query(Milestone):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Milestone):... 
    def not_by_state(self, target, *states) -> Query(Milestone):... 
    def not_by_status(self, target, *statuses) -> Query(Milestone):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Milestone):... 
    def not_by_type(self, target, *types) -> Query(Milestone):... 
    def unlink_inputs(self, entity_collection) -> Milestone:... 
    def unlink_outputs(self, entity_collection) -> Milestone:... 

class Note(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.author: BaseUser = BaseUser 
        self.category: NoteCategory = NoteCategory 
        self.category_id: str = str() 
        self.completed_at: str = str() 
        self.completed_by: User = User 
        self.completed_by_id: str = str() 
        self.content: str = str() 
        self.date: str = str() 
        self.frame_number: int = int() 
        self.id: str = str() 
        self.in_reply_to: Note = Note 
        self.in_reply_to_id: str = str() 
        self.is_todo: bool = bool() 
        self.metadata: typing.List = [Metadata] 
        self.note_components: NoteComponent = NoteComponent 
        self.note_label_links: NoteLabelLink = NoteLabelLink 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.recipients: Recipient = Recipient 
        self.replies: Note = Note 
        self.thread_activity: str = str() 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Note:... 
    def by_id(self, target, *ids) -> Query(Note):... 
    def by_metadata(self, target, *dictionaries) -> Query(Note):... 
    def by_name(self, target, *names) -> Query(Note):... 
    def create(self) -> Note:... 
    def create_batch(self, *attributes) -> Note:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Note:... 
    def get_all(self, projections=None) -> Note:... 
    def get_first(self, projections=None) -> Note:... 
    def get_inputs(self, projections=None) -> Note:... 
    def get_one(self, projections=None) -> Note:... 
    def get_outputs(self, projections=None) -> Note:... 
    def inject(self, filter) -> Query(Note):... 
    def not_by_id(self, target, *ids) -> Query(Note):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Note):... 
    def not_by_name(self, target, *names) -> Query(Note):... 

class NoteAnnotationComponent:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.data: object 
        self.note: Note = Note 
        self.note_id: str = str() 
        self.thumbnail_url: object 
        self.url: object 


class NoteCategory(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.color: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.sort: int = int() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> NoteCategory:... 
    def by_id(self, target, *ids) -> Query(NoteCategory):... 
    def by_metadata(self, target, *dictionaries) -> Query(NoteCategory):... 
    def by_name(self, target, *names) -> Query(NoteCategory):... 
    def create(self) -> NoteCategory:... 
    def create_batch(self, *attributes) -> NoteCategory:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> NoteCategory:... 
    def get_all(self, projections=None) -> NoteCategory:... 
    def get_first(self, projections=None) -> NoteCategory:... 
    def get_inputs(self, projections=None) -> NoteCategory:... 
    def get_one(self, projections=None) -> NoteCategory:... 
    def get_outputs(self, projections=None) -> NoteCategory:... 
    def inject(self, filter) -> Query(NoteCategory):... 
    def not_by_id(self, target, *ids) -> Query(NoteCategory):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(NoteCategory):... 
    def not_by_name(self, target, *names) -> Query(NoteCategory):... 

class NoteComponent(Component):
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.note: Note = Note 
        self.note_id: str = str() 
        self.thumbnail_url: object 
        self.url: object 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> NoteComponent:... 
    def by_file_type(self, target, *file_types) -> Query(NoteComponent):... 
    def by_id(self, target, *ids) -> Query(NoteComponent):... 
    def by_location(self, target, *component_locations) -> Query(NoteComponent):... 
    def by_metadata(self, target, *dictionaries) -> Query(NoteComponent):... 
    def by_name(self, target, *names) -> Query(NoteComponent):... 
    def by_resource_identifier(self, target, *resource_identifiers) -> Query(NoteComponent):... 
    def by_size(self, target, minimum=0, maximum=0) -> Query(NoteComponent):... 
    def by_system_type(self, target, *system_types) -> Query(NoteComponent):... 
    def by_version(self, target, *versions) -> Query(NoteComponent):... 
    def create(self) -> NoteComponent:... 
    def create_batch(self, *attributes) -> NoteComponent:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> NoteComponent:... 
    def get_all(self, projections=None) -> NoteComponent:... 
    def get_first(self, projections=None) -> NoteComponent:... 
    def get_inputs(self, projections=None) -> NoteComponent:... 
    def get_one(self, projections=None) -> NoteComponent:... 
    def get_outputs(self, projections=None) -> NoteComponent:... 
    def inject(self, filter) -> Query(NoteComponent):... 
    def not_by_file_type(self, target, *file_types) -> Query(NoteComponent):... 
    def not_by_id(self, target, *ids) -> Query(NoteComponent):... 
    def not_by_location(self, target, *component_locations) -> Query(NoteComponent):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(NoteComponent):... 
    def not_by_name(self, target, *names) -> Query(NoteComponent):... 
    def not_by_resource_identifier(self, target, *resource_identifiers) -> Query(NoteComponent):... 
    def not_by_size(self, target, minimum=0, maximum=0) -> Query(NoteComponent):... 
    def not_by_system_type(self, target, *system_types) -> Query(NoteComponent):... 
    def not_by_version(self, target, *versions) -> Query(NoteComponent):... 

class NoteLabel(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.color: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.sort: int = int() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> NoteLabel:... 
    def by_id(self, target, *ids) -> Query(NoteLabel):... 
    def by_metadata(self, target, *dictionaries) -> Query(NoteLabel):... 
    def by_name(self, target, *names) -> Query(NoteLabel):... 
    def create(self) -> NoteLabel:... 
    def create_batch(self, *attributes) -> NoteLabel:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> NoteLabel:... 
    def get_all(self, projections=None) -> NoteLabel:... 
    def get_first(self, projections=None) -> NoteLabel:... 
    def get_inputs(self, projections=None) -> NoteLabel:... 
    def get_one(self, projections=None) -> NoteLabel:... 
    def get_outputs(self, projections=None) -> NoteLabel:... 
    def inject(self, filter) -> Query(NoteLabel):... 
    def not_by_id(self, target, *ids) -> Query(NoteLabel):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(NoteLabel):... 
    def not_by_name(self, target, *names) -> Query(NoteLabel):... 

class NoteLabelLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.label: NoteLabel = NoteLabel 
        self.label_id: str = str() 
        self.note: Note = Note 
        self.note_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> NoteLabelLink:... 

class ObjectType(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.icon: str = str() 
        self.id: str = str() 
        self.is_leaf: bool = bool() 
        self.is_prioritizable: bool = bool() 
        self.is_schedulable: bool = bool() 
        self.is_statusable: bool = bool() 
        self.is_taskable: bool = bool() 
        self.is_time_reportable: bool = bool() 
        self.is_typeable: bool = bool() 
        self.name: str = str() 
        self.project_schemas: ProjectSchema = ProjectSchema 
        self.sort: int = int() 
        self.tasks: Task = Task 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ObjectType:... 
    def by_id(self, target, *ids) -> Query(ObjectType):... 
    def by_metadata(self, target, *dictionaries) -> Query(ObjectType):... 
    def create(self) -> ObjectType:... 
    def create_batch(self, *attributes) -> ObjectType:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ObjectType:... 
    def get_all(self, projections=None) -> ObjectType:... 
    def get_first(self, projections=None) -> ObjectType:... 
    def get_inputs(self, projections=None) -> ObjectType:... 
    def get_one(self, projections=None) -> ObjectType:... 
    def get_outputs(self, projections=None) -> ObjectType:... 
    def inject(self, filter) -> Query(ObjectType):... 
    def not_by_id(self, target, *ids) -> Query(ObjectType):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ObjectType):... 

class Priority:
    def __init__(self, *args, **kwargs) -> None: 
        self.color: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.sort: int = int() 
        self.tasks: Task = Task 
        self.value: float = float() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Priority:... 

class Project(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.calendar_events: CalendarEvent = CalendarEvent 
        self.children: Context = Context 
        self.color: str = str() 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.disk: Disk = Disk 
        self.disk_id: str = str() 
        self.end_date: str = str() 
        self.full_name: str = str() 
        self.id: str = str() 
        self.is_global: bool = bool() 
        self.is_private: bool = bool() 
        self.link: str = str() 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.project_id: str = str() 
        self.project_schema: ProjectSchema = ProjectSchema 
        self.project_schema_id: str = str() 
        self.review_session_folders: ReviewSessionFolder = ReviewSessionFolder 
        self.review_sessions: ReviewSession = ReviewSession 
        self.root: str = str() 
        self.scopes: Scope = Scope 
        self.start_date: str = str() 
        self.status: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 
        self.timelogs: Timelog = Timelog 
        self.user_security_role_projects: UserSecurityRoleProject = UserSecurityRoleProject 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Project:... 
    def by_id(self, target, *ids) -> Query(Project):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Project):... 
    def by_metadata(self, target, *dictionaries) -> Query(Project):... 
    def by_name(self, target, *names) -> Query(Project):... 
    def by_status(self, target, status) -> Query(Project):... 
    def create(self, name, project_schema) -> Project:... 
    def create_batch(self, *attributes) -> Project:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Project:... 
    def get_all(self, projections=None) -> Project:... 
    def get_first(self, projections=None) -> Project:... 
    def get_inputs(self, projections=None) -> Project:... 
    def get_one(self, projections=None) -> Project:... 
    def get_outputs(self, projections=None) -> Project:... 
    def inject(self, filter) -> Query(Project):... 
    def not_by_id(self, target, *ids) -> Query(Project):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Project):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Project):... 
    def not_by_name(self, target, *names) -> Query(Project):... 
    def not_by_status(self, target, status) -> Query(Project):... 

class ProjectSchema(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self._overrides: ProjectSchemaOverride = ProjectSchemaOverride 
        self._schemas: Schema = Schema 
        self._task_type_schema: TaskTypeSchema = TaskTypeSchema 
        self._task_workflow: WorkflowSchema = WorkflowSchema 
        self._version_workflow: WorkflowSchema = WorkflowSchema 
        self.asset_version_workflow_schema: WorkflowSchema = WorkflowSchema 
        self.asset_version_workflow_schema_id: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.object_type_schemas: Schema = Schema 
        self.object_types: ObjectType = ObjectType 
        self.task_templates: TaskTemplate = TaskTemplate 
        self.task_type_schema: TaskTypeSchema = TaskTypeSchema 
        self.task_type_schema_id: str = str() 
        self.task_workflow_schema: WorkflowSchema = WorkflowSchema 
        self.task_workflow_schema_id: str = str() 
        self.task_workflow_schema_overrides: ProjectSchemaOverride = ProjectSchemaOverride 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ProjectSchema:... 
    def by_id(self, target, *ids) -> Query(ProjectSchema):... 
    def by_metadata(self, target, *dictionaries) -> Query(ProjectSchema):... 
    def create(self) -> ProjectSchema:... 
    def create_batch(self, *attributes) -> ProjectSchema:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ProjectSchema:... 
    def get_all(self, projections=None) -> ProjectSchema:... 
    def get_first(self, projections=None) -> ProjectSchema:... 
    def get_inputs(self, projections=None) -> ProjectSchema:... 
    def get_one(self, projections=None) -> ProjectSchema:... 
    def get_outputs(self, projections=None) -> ProjectSchema:... 
    def inject(self, filter) -> Query(ProjectSchema):... 
    def not_by_id(self, target, *ids) -> Query(ProjectSchema):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ProjectSchema):... 

class ProjectSchemaObjectType:
    def __init__(self, *args, **kwargs) -> None: 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.project_schema: ProjectSchema = ProjectSchema 
        self.project_schema_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ProjectSchemaObjectType:... 

class ProjectSchemaOverride:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.project_schema_id: str = str() 
        self.type_id: str = str() 
        self.workflow_schema: WorkflowSchema = WorkflowSchema 
        self.workflow_schema_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ProjectSchemaOverride:... 

class Recipient(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.note: Note = Note 
        self.note_id: str = str() 
        self.recipient: Resource = Resource 
        self.resource_id: str = str() 
        self.text_mentioned: str = str() 
        self.user: User = User 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Recipient:... 
    def by_id(self, target, *ids) -> Query(Recipient):... 
    def by_metadata(self, target, *dictionaries) -> Query(Recipient):... 
    def create(self) -> Recipient:... 
    def create_batch(self, *attributes) -> Recipient:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Recipient:... 
    def get_all(self, projections=None) -> Recipient:... 
    def get_first(self, projections=None) -> Recipient:... 
    def get_inputs(self, projections=None) -> Recipient:... 
    def get_one(self, projections=None) -> Recipient:... 
    def get_outputs(self, projections=None) -> Recipient:... 
    def inject(self, filter) -> Query(Recipient):... 
    def not_by_id(self, target, *ids) -> Query(Recipient):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Recipient):... 

class Resource(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assignments: Appointment = Appointment 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.id: str = str() 
        self.resource_type: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Resource:... 
    def by_id(self, target, *ids) -> Query(Resource):... 
    def by_metadata(self, target, *dictionaries) -> Query(Resource):... 
    def create(self) -> Resource:... 
    def create_batch(self, *attributes) -> Resource:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Resource:... 
    def get_all(self, projections=None) -> Resource:... 
    def get_first(self, projections=None) -> Resource:... 
    def get_inputs(self, projections=None) -> Resource:... 
    def get_one(self, projections=None) -> Resource:... 
    def get_outputs(self, projections=None) -> Resource:... 
    def inject(self, filter) -> Query(Resource):... 
    def not_by_id(self, target, *ids) -> Query(Resource):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Resource):... 

class ReviewSession(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.availability: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.is_moderated: bool = bool() 
        self.is_open: bool = bool() 
        self.name: str = str() 
        self.passphrase: str = str() 
        self.passphrase_enabled: bool = bool() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.review_session_folder: ReviewSessionFolder = ReviewSessionFolder 
        self.review_session_folder_id: str = str() 
        self.review_session_invitees: ReviewSessionInvitee = ReviewSessionInvitee 
        self.review_session_objects: ReviewSessionObject = ReviewSessionObject 
        self.settings: EntitySetting = EntitySetting 
        self.shareable_url_enabled: bool = bool() 
        self.start_date: str = str() 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ReviewSession:... 
    def by_id(self, target, *ids) -> Query(ReviewSession):... 
    def by_metadata(self, target, *dictionaries) -> Query(ReviewSession):... 
    def by_name(self, target, *names) -> Query(ReviewSession):... 
    def create(self, name, project_schema) -> ReviewSession:... 
    def create_batch(self, *attributes) -> ReviewSession:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ReviewSession:... 
    def get_all(self, projections=None) -> ReviewSession:... 
    def get_first(self, projections=None) -> ReviewSession:... 
    def get_inputs(self, projections=None) -> ReviewSession:... 
    def get_one(self, projections=None) -> ReviewSession:... 
    def get_outputs(self, projections=None) -> ReviewSession:... 
    def inject(self, filter) -> Query(ReviewSession):... 
    def not_by_id(self, target, *ids) -> Query(ReviewSession):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ReviewSession):... 
    def not_by_name(self, target, *names) -> Query(ReviewSession):... 

class ReviewSessionFolder:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.review_sessions: ReviewSession = ReviewSession 


class ReviewSessionInvitee(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.created_from_shared_url: bool = bool() 
        self.email: str = str() 
        self.id: str = str() 
        self.last_sent_at: str = str() 
        self.name: str = str() 
        self.resource: Resource = Resource 
        self.resource_id: str = str() 
        self.review_session: ReviewSession = ReviewSession 
        self.review_session_id: str = str() 
        self.statuses: ReviewSessionObjectStatus = ReviewSessionObjectStatus 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ReviewSessionInvitee:... 
    def by_id(self, target, *ids) -> Query(ReviewSessionInvitee):... 
    def by_metadata(self, target, *dictionaries) -> Query(ReviewSessionInvitee):... 
    def create(self) -> ReviewSessionInvitee:... 
    def create_batch(self, *attributes) -> ReviewSessionInvitee:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ReviewSessionInvitee:... 
    def get_all(self, projections=None) -> ReviewSessionInvitee:... 
    def get_first(self, projections=None) -> ReviewSessionInvitee:... 
    def get_inputs(self, projections=None) -> ReviewSessionInvitee:... 
    def get_one(self, projections=None) -> ReviewSessionInvitee:... 
    def get_outputs(self, projections=None) -> ReviewSessionInvitee:... 
    def inject(self, filter) -> Query(ReviewSessionInvitee):... 
    def not_by_id(self, target, *ids) -> Query(ReviewSessionInvitee):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ReviewSessionInvitee):... 

class ReviewSessionObject(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.annotations: ReviewSessionObjectAnnotation = ReviewSessionObjectAnnotation 
        self.asset_version: AssetVersion = AssetVersion 
        self.created_at: str = str() 
        self.description: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.notes: Note = Note 
        self.review_session: ReviewSession = ReviewSession 
        self.review_session_id: str = str() 
        self.sort_order: float = float() 
        self.statuses: ReviewSessionObjectStatus = ReviewSessionObjectStatus 
        self.version: str = str() 
        self.version_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ReviewSessionObject:... 
    def by_id(self, target, *ids) -> Query(ReviewSessionObject):... 
    def by_metadata(self, target, *dictionaries) -> Query(ReviewSessionObject):... 
    def create(self) -> ReviewSessionObject:... 
    def create_batch(self, *attributes) -> ReviewSessionObject:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ReviewSessionObject:... 
    def get_all(self, projections=None) -> ReviewSessionObject:... 
    def get_first(self, projections=None) -> ReviewSessionObject:... 
    def get_inputs(self, projections=None) -> ReviewSessionObject:... 
    def get_one(self, projections=None) -> ReviewSessionObject:... 
    def get_outputs(self, projections=None) -> ReviewSessionObject:... 
    def inject(self, filter) -> Query(ReviewSessionObject):... 
    def not_by_id(self, target, *ids) -> Query(ReviewSessionObject):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ReviewSessionObject):... 

class ReviewSessionObjectAnnotation:
    def __init__(self, *args, **kwargs) -> None: 
        self.created_at: str = str() 
        self.data: str = str() 
        self.frame_number: int = int() 
        self.id: str = str() 
        self.review_session_object: ReviewSessionObject = ReviewSessionObject 
        self.review_session_object_id: str = str() 
        self.updated_at: str = str() 


class ReviewSessionObjectAnnotationComponent:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.frame_number: str = str() 
        self.review_session_object: ReviewSessionObject = ReviewSessionObject 
        self.review_session_object_id: str = str() 
        self.thumbnail_url: object 
        self.url: object 


class ReviewSessionObjectStatus(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.created_at: str = str() 
        self.id: str = str() 
        self.invitee: ReviewSessionInvitee = ReviewSessionInvitee 
        self.resource: Resource = Resource 
        self.resource_id: str = str() 
        self.review_session_invitee_id: str = str() 
        self.review_session_object: ReviewSessionObject = ReviewSessionObject 
        self.review_session_object_id: str = str() 
        self.status: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> ReviewSessionObjectStatus:... 
    def by_id(self, target, *ids) -> Query(ReviewSessionObjectStatus):... 
    def by_metadata(self, target, *dictionaries) -> Query(ReviewSessionObjectStatus):... 
    def create(self) -> ReviewSessionObjectStatus:... 
    def create_batch(self, *attributes) -> ReviewSessionObjectStatus:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> ReviewSessionObjectStatus:... 
    def get_all(self, projections=None) -> ReviewSessionObjectStatus:... 
    def get_first(self, projections=None) -> ReviewSessionObjectStatus:... 
    def get_inputs(self, projections=None) -> ReviewSessionObjectStatus:... 
    def get_one(self, projections=None) -> ReviewSessionObjectStatus:... 
    def get_outputs(self, projections=None) -> ReviewSessionObjectStatus:... 
    def inject(self, filter) -> Query(ReviewSessionObjectStatus):... 
    def not_by_id(self, target, *ids) -> Query(ReviewSessionObjectStatus):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(ReviewSessionObjectStatus):... 

class Scene(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Scene:... 
    def by_assignee(self, target, *assignees) -> Query(Scene):... 
    def by_id(self, target, *ids) -> Query(Scene):... 
    def by_incoming_link(self, target, *ids) -> Query(Scene):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Scene):... 
    def by_metadata(self, target, *dictionaries) -> Query(Scene):... 
    def by_name(self, target, *names) -> Query(Scene):... 
    def by_outgoing_link(self, target, *ids) -> Query(Scene):... 
    def by_state(self, target, *states) -> Query(Scene):... 
    def by_status(self, target, *statuses) -> Query(Scene):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Scene):... 
    def by_type(self, target, *types) -> Query(Scene):... 
    def create(self) -> Scene:... 
    def create_batch(self, *attributes) -> Scene:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Scene:... 
    def get_all(self, projections=None) -> Scene:... 
    def get_first(self, projections=None) -> Scene:... 
    def get_inputs(self, projections=None) -> Scene:... 
    def get_one(self, projections=None) -> Scene:... 
    def get_outputs(self, projections=None) -> Scene:... 
    def inject(self, filter) -> Query(Scene):... 
    def link_inputs(self, entity_collection) -> Scene:... 
    def link_outputs(self, entity_collection) -> Scene:... 
    def not_by_assignee(self, target, *assignees) -> Query(Scene):... 
    def not_by_id(self, target, *ids) -> Query(Scene):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Scene):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Scene):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Scene):... 
    def not_by_name(self, target, *names) -> Query(Scene):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Scene):... 
    def not_by_state(self, target, *states) -> Query(Scene):... 
    def not_by_status(self, target, *statuses) -> Query(Scene):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Scene):... 
    def not_by_type(self, target, *types) -> Query(Scene):... 
    def unlink_inputs(self, entity_collection) -> Scene:... 
    def unlink_outputs(self, entity_collection) -> Scene:... 

class Schema:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.object_type_id: str = str() 
        self.project_schema_id: str = str() 
        self.statuses: SchemaStatus = SchemaStatus 
        self.type_id: str = str() 
        self.types: SchemaType = SchemaType 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Schema:... 

class SchemaStatus:
    def __init__(self, *args, **kwargs) -> None: 
        self.schema_id: str = str() 
        self.sort: int = int() 
        self.status_id: str = str() 
        self.task_status: Status = Status 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> SchemaStatus:... 

class SchemaType:
    def __init__(self, *args, **kwargs) -> None: 
        self.schema_id: str = str() 
        self.sort: int = int() 
        self.task_type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> SchemaType:... 

class Scope:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Scope:... 

class SecurityRole(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.type: str = str() 
        self.user_security_roles: UserSecurityRole = UserSecurityRole 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> SecurityRole:... 
    def by_id(self, target, *ids) -> Query(SecurityRole):... 
    def by_metadata(self, target, *dictionaries) -> Query(SecurityRole):... 
    def create(self) -> SecurityRole:... 
    def create_batch(self, *attributes) -> SecurityRole:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> SecurityRole:... 
    def get_all(self, projections=None) -> SecurityRole:... 
    def get_first(self, projections=None) -> SecurityRole:... 
    def get_inputs(self, projections=None) -> SecurityRole:... 
    def get_one(self, projections=None) -> SecurityRole:... 
    def get_outputs(self, projections=None) -> SecurityRole:... 
    def inject(self, filter) -> Query(SecurityRole):... 
    def not_by_id(self, target, *ids) -> Query(SecurityRole):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(SecurityRole):... 

class Sequence(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Sequence:... 
    def by_assignee(self, target, *assignees) -> Query(Sequence):... 
    def by_id(self, target, *ids) -> Query(Sequence):... 
    def by_incoming_link(self, target, *ids) -> Query(Sequence):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Sequence):... 
    def by_metadata(self, target, *dictionaries) -> Query(Sequence):... 
    def by_name(self, target, *names) -> Query(Sequence):... 
    def by_outgoing_link(self, target, *ids) -> Query(Sequence):... 
    def by_state(self, target, *states) -> Query(Sequence):... 
    def by_status(self, target, *statuses) -> Query(Sequence):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Sequence):... 
    def by_type(self, target, *types) -> Query(Sequence):... 
    def create(self, name) -> Sequence:... 
    def create_batch(self, *attributes) -> Sequence:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Sequence:... 
    def get_all(self, projections=None) -> Sequence:... 
    def get_first(self, projections=None) -> Sequence:... 
    def get_inputs(self, projections=None) -> Sequence:... 
    def get_one(self, projections=None) -> Sequence:... 
    def get_outputs(self, projections=None) -> Sequence:... 
    def inject(self, filter) -> Query(Sequence):... 
    def link_inputs(self, entity_collection) -> Sequence:... 
    def link_outputs(self, entity_collection) -> Sequence:... 
    def not_by_assignee(self, target, *assignees) -> Query(Sequence):... 
    def not_by_id(self, target, *ids) -> Query(Sequence):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Sequence):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Sequence):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Sequence):... 
    def not_by_name(self, target, *names) -> Query(Sequence):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Sequence):... 
    def not_by_state(self, target, *states) -> Query(Sequence):... 
    def not_by_status(self, target, *statuses) -> Query(Sequence):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Sequence):... 
    def not_by_type(self, target, *types) -> Query(Sequence):... 
    def unlink_inputs(self, entity_collection) -> Sequence:... 
    def unlink_outputs(self, entity_collection) -> Sequence:... 

class SequenceComponent:
    def __init__(self, *args, **kwargs) -> None: 
        self.component_locations: ComponentLocation = ComponentLocation 
        self.container: ContainerComponent = ContainerComponent 
        self.container_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.file_type: str = str() 
        self.id: str = str() 
        self.members: Component = Component 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.padding: int = int() 
        self.size: int = int() 
        self.system_type: str = str() 
        self.version: AssetVersion = AssetVersion 
        self.version_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> SequenceComponent:... 

class Setting:
    def __init__(self, *args, **kwargs) -> None: 
        self.group: str = str() 
        self.name: str = str() 
        self.value: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Setting:... 

class SettingComponent:
    def __init__(self, *args, **kwargs) -> None: 
        self.component: Component = Component 
        self.component_id: str = str() 
        self.group: str = str() 
        self.name: str = str() 
        self.setting: Setting = Setting 
        self.thumbnail_url: object 
        self.url: object 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> SettingComponent:... 

class Shot(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Shot:... 
    def by_assignee(self, target, *assignees) -> Query(Shot):... 
    def by_id(self, target, *ids) -> Query(Shot):... 
    def by_incoming_link(self, target, *ids) -> Query(Shot):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Shot):... 
    def by_metadata(self, target, *dictionaries) -> Query(Shot):... 
    def by_name(self, target, *names) -> Query(Shot):... 
    def by_outgoing_link(self, target, *ids) -> Query(Shot):... 
    def by_state(self, target, *states) -> Query(Shot):... 
    def by_status(self, target, *statuses) -> Query(Shot):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Shot):... 
    def by_type(self, target, *types) -> Query(Shot):... 
    def create(self, name) -> Shot:... 
    def create_batch(self, *attributes) -> Shot:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Shot:... 
    def get_all(self, projections=None) -> Shot:... 
    def get_first(self, projections=None) -> Shot:... 
    def get_inputs(self, projections=None) -> Shot:... 
    def get_one(self, projections=None) -> Shot:... 
    def get_outputs(self, projections=None) -> Shot:... 
    def inject(self, filter) -> Query(Shot):... 
    def link_inputs(self, entity_collection) -> Shot:... 
    def link_outputs(self, entity_collection) -> Shot:... 
    def not_by_assignee(self, target, *assignees) -> Query(Shot):... 
    def not_by_id(self, target, *ids) -> Query(Shot):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Shot):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Shot):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Shot):... 
    def not_by_name(self, target, *names) -> Query(Shot):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Shot):... 
    def not_by_state(self, target, *states) -> Query(Shot):... 
    def not_by_status(self, target, *statuses) -> Query(Shot):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Shot):... 
    def not_by_type(self, target, *types) -> Query(Shot):... 
    def unlink_inputs(self, entity_collection) -> Shot:... 
    def unlink_outputs(self, entity_collection) -> Shot:... 

class SplitTaskPart:
    def __init__(self, *args, **kwargs) -> None: 
        self.end_date: str = str() 
        self.id: str = str() 
        self.label: str = str() 
        self.start_date: str = str() 
        self.task: Task = Task 
        self.task_id: str = str() 


class State(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.short: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> State:... 
    def by_id(self, target, *ids) -> Query(State):... 
    def by_metadata(self, target, *dictionaries) -> Query(State):... 
    def create(self) -> State:... 
    def create_batch(self, *attributes) -> State:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> State:... 
    def get_all(self, projections=None) -> State:... 
    def get_first(self, projections=None) -> State:... 
    def get_inputs(self, projections=None) -> State:... 
    def get_one(self, projections=None) -> State:... 
    def get_outputs(self, projections=None) -> State:... 
    def inject(self, filter) -> Query(State):... 
    def not_by_id(self, target, *ids) -> Query(State):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(State):... 

class Status(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.color: str = str() 
        self.id: str = str() 
        self.is_active: bool = bool() 
        self.name: str = str() 
        self.sort: int = int() 
        self.state: State = State 
        self.tasks: Task = Task 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Status:... 
    def by_id(self, target, *ids) -> Query(Status):... 
    def by_metadata(self, target, *dictionaries) -> Query(Status):... 
    def by_name(self, target, *names) -> Query(Status):... 
    def create(self) -> Status:... 
    def create_batch(self, *attributes) -> Status:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Status:... 
    def get_all(self, projections=None) -> Status:... 
    def get_first(self, projections=None) -> Status:... 
    def get_inputs(self, projections=None) -> Status:... 
    def get_one(self, projections=None) -> Status:... 
    def get_outputs(self, projections=None) -> Status:... 
    def inject(self, filter) -> Query(Status):... 
    def not_by_id(self, target, *ids) -> Query(Status):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Status):... 
    def not_by_name(self, target, *names) -> Query(Status):... 

class StatusChange:
    def __init__(self, *args, **kwargs) -> None: 
        self.date: str = str() 
        self.from_status: Status = Status 
        self.from_status_id: str = str() 
        self.id: str = str() 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> StatusChange:... 

class StatusRule:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.status_rule_group: StatusRuleGroup = StatusRuleGroup 
        self.status_rule_group_id: str = str() 


class StatusRuleGroup:
    def __init__(self, *args, **kwargs) -> None: 
        self.entity_type: str = str() 
        self.id: str = str() 
        self.role: SecurityRole = SecurityRole 
        self.role_id: str = str() 
        self.schema: ProjectSchema = ProjectSchema 
        self.schema_id: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.status_rules: StatusRule = StatusRule 


class Task(TypedContext):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Task:... 
    def by_assignee(self, target, *assignees) -> Query(Task):... 
    def by_id(self, target, *ids) -> Query(Task):... 
    def by_incoming_link(self, target, *ids) -> Query(Task):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Task):... 
    def by_metadata(self, target, *dictionaries) -> Query(Task):... 
    def by_name(self, target, *names) -> Query(Task):... 
    def by_outgoing_link(self, target, *ids) -> Query(Task):... 
    def by_state(self, target, *states) -> Query(Task):... 
    def by_status(self, target, *statuses) -> Query(Task):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(Task):... 
    def by_type(self, target, *types) -> Query(Task):... 
    def create(self, name, task_type) -> Task:... 
    def create_batch(self, *attributes) -> Task:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Task:... 
    def get_all(self, projections=None) -> Task:... 
    def get_first(self, projections=None) -> Task:... 
    def get_inputs(self, projections=None) -> Task:... 
    def get_one(self, projections=None) -> Task:... 
    def get_outputs(self, projections=None) -> Task:... 
    def inject(self, filter) -> Query(Task):... 
    def link_inputs(self, entity_collection) -> Task:... 
    def link_outputs(self, entity_collection) -> Task:... 
    def not_by_assignee(self, target, *assignees) -> Query(Task):... 
    def not_by_id(self, target, *ids) -> Query(Task):... 
    def not_by_incoming_link(self, target, *ids) -> Query(Task):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Task):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Task):... 
    def not_by_name(self, target, *names) -> Query(Task):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(Task):... 
    def not_by_state(self, target, *states) -> Query(Task):... 
    def not_by_status(self, target, *statuses) -> Query(Task):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(Task):... 
    def not_by_type(self, target, *types) -> Query(Task):... 
    def unlink_inputs(self, entity_collection) -> Task:... 
    def unlink_outputs(self, entity_collection) -> Task:... 

class TaskTemplate:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.items: TaskTemplateItem = TaskTemplateItem 
        self.name: str = str() 
        self.project_schema: ProjectSchema = ProjectSchema 
        self.project_schema_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TaskTemplate:... 

class TaskTemplateItem:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.task_type: Type = Type 
        self.task_type_id: str = str() 
        self.template: TaskTemplate = TaskTemplate 
        self.template_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TaskTemplateItem:... 

class TaskTypeSchema(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.types: Type = Type 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TaskTypeSchema:... 
    def by_id(self, target, *ids) -> Query(TaskTypeSchema):... 
    def by_metadata(self, target, *dictionaries) -> Query(TaskTypeSchema):... 
    def create(self) -> TaskTypeSchema:... 
    def create_batch(self, *attributes) -> TaskTypeSchema:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> TaskTypeSchema:... 
    def get_all(self, projections=None) -> TaskTypeSchema:... 
    def get_first(self, projections=None) -> TaskTypeSchema:... 
    def get_inputs(self, projections=None) -> TaskTypeSchema:... 
    def get_one(self, projections=None) -> TaskTypeSchema:... 
    def get_outputs(self, projections=None) -> TaskTypeSchema:... 
    def inject(self, filter) -> Query(TaskTypeSchema):... 
    def not_by_id(self, target, *ids) -> Query(TaskTypeSchema):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(TaskTypeSchema):... 

class TaskTypeSchemaType:
    def __init__(self, *args, **kwargs) -> None: 
        self.task_type_schema_id: str = str() 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TaskTypeSchemaType:... 

class Timelog(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.comment: str = str() 
        self.context: Context = Context 
        self.context_id: str = str() 
        self.duration: float = float() 
        self.id: str = str() 
        self.name: str = str() 
        self.start: str = str() 
        self.time_zone_offset: float = float() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Timelog:... 
    def by_id(self, target, *ids) -> Query(Timelog):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(Timelog):... 
    def by_metadata(self, target, *dictionaries) -> Query(Timelog):... 
    def by_name(self, target, *names) -> Query(Timelog):... 
    def create(self) -> Timelog:... 
    def create_batch(self, *attributes) -> Timelog:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Timelog:... 
    def get_all(self, projections=None) -> Timelog:... 
    def get_first(self, projections=None) -> Timelog:... 
    def get_inputs(self, projections=None) -> Timelog:... 
    def get_one(self, projections=None) -> Timelog:... 
    def get_outputs(self, projections=None) -> Timelog:... 
    def inject(self, filter) -> Query(Timelog):... 
    def not_by_id(self, target, *ids) -> Query(Timelog):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(Timelog):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Timelog):... 
    def not_by_name(self, target, *names) -> Query(Timelog):... 

class Timer:
    def __init__(self, *args, **kwargs) -> None: 
        self.comment: str = str() 
        self.context: Context = Context 
        self.context_id: str = str() 
        self.id: str = str() 
        self.name: str = str() 
        self.start: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Timer:... 

class Type(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.color: str = str() 
        self.id: str = str() 
        self.is_billable: bool = bool() 
        self.name: str = str() 
        self.sort: int = int() 
        self.task_type_schemas: TaskTypeSchema = TaskTypeSchema 
        self.tasks: Task = Task 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> Type:... 
    def by_id(self, target, *ids) -> Query(Type):... 
    def by_metadata(self, target, *dictionaries) -> Query(Type):... 
    def create(self) -> Type:... 
    def create_batch(self, *attributes) -> Type:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> Type:... 
    def get_all(self, projections=None) -> Type:... 
    def get_first(self, projections=None) -> Type:... 
    def get_inputs(self, projections=None) -> Type:... 
    def get_one(self, projections=None) -> Type:... 
    def get_outputs(self, projections=None) -> Type:... 
    def inject(self, filter) -> Query(Type):... 
    def not_by_id(self, target, *ids) -> Query(Type):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(Type):... 

class TypedContext(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self._link: str = str() 
        self.allocations: Appointment = Appointment 
        self.ancestors: TypedContext = TypedContext 
        self.appointments: Appointment = Appointment 
        self.assets: Asset = Asset 
        self.assignments: Appointment = Appointment 
        self.bid: float = float() 
        self.bid_time_logged_difference: float = float() 
        self.children: Context = Context 
        self.context_type: str = str() 
        self.created_at: str = str() 
        self.created_by: User = User 
        self.created_by_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.descendants: TypedContext = TypedContext 
        self.description: str = str() 
        self.end_date: str = str() 
        self.id: str = str() 
        self.incoming_links: TypedContextLink = TypedContextLink 
        self.link: str = str() 
        self.lists: TypedContextList = TypedContextList 
        self.managers: Manager = Manager 
        self.metadata: typing.List = [Metadata] 
        self.name: str = str() 
        self.notes: Note = Note 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.outgoing_links: TypedContextLink = TypedContextLink 
        self.parent: Context = Context 
        self.parent_id: str = str() 
        self.priority: Priority = Priority 
        self.priority_id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.scopes: Scope = Scope 
        self.sort: float = float() 
        self.split_parts: SplitTaskPart = SplitTaskPart 
        self.start_date: str = str() 
        self.status: Status = Status 
        self.status_changes: StatusChange = StatusChange 
        self.status_id: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_source_id: str = str() 
        self.thumbnail_url: object 
        self.time_logged: float = float() 
        self.timelogs: Timelog = Timelog 
        self.type: Type = Type 
        self.type_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TypedContext:... 
    def by_assignee(self, target, *assignees) -> Query(TypedContext):... 
    def by_id(self, target, *ids) -> Query(TypedContext):... 
    def by_incoming_link(self, target, *ids) -> Query(TypedContext):... 
    def by_lifespan(self, target, start=None, end=None) -> Query(TypedContext):... 
    def by_metadata(self, target, *dictionaries) -> Query(TypedContext):... 
    def by_name(self, target, *names) -> Query(TypedContext):... 
    def by_outgoing_link(self, target, *ids) -> Query(TypedContext):... 
    def by_state(self, target, *states) -> Query(TypedContext):... 
    def by_status(self, target, *statuses) -> Query(TypedContext):... 
    def by_status_change_time(self, target, start=None, end=None) -> Query(TypedContext):... 
    def by_type(self, target, *types) -> Query(TypedContext):... 
    def create(self) -> TypedContext:... 
    def create_batch(self, *attributes) -> TypedContext:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> TypedContext:... 
    def get_all(self, projections=None) -> TypedContext:... 
    def get_first(self, projections=None) -> TypedContext:... 
    def get_inputs(self, projections=None) -> TypedContext:... 
    def get_one(self, projections=None) -> TypedContext:... 
    def get_outputs(self, projections=None) -> TypedContext:... 
    def inject(self, filter) -> Query(TypedContext):... 
    def link_inputs(self, entity_collection) -> TypedContext:... 
    def link_outputs(self, entity_collection) -> TypedContext:... 
    def not_by_assignee(self, target, *assignees) -> Query(TypedContext):... 
    def not_by_id(self, target, *ids) -> Query(TypedContext):... 
    def not_by_incoming_link(self, target, *ids) -> Query(TypedContext):... 
    def not_by_lifespan(self, target, start=None, end=None) -> Query(TypedContext):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(TypedContext):... 
    def not_by_name(self, target, *names) -> Query(TypedContext):... 
    def not_by_outgoing_link(self, target, *ids) -> Query(TypedContext):... 
    def not_by_state(self, target, *states) -> Query(TypedContext):... 
    def not_by_status(self, target, *statuses) -> Query(TypedContext):... 
    def not_by_status_change_time(self, target, start=None, end=None) -> Query(TypedContext):... 
    def not_by_type(self, target, *types) -> Query(TypedContext):... 
    def unlink_inputs(self, entity_collection) -> TypedContext:... 
    def unlink_outputs(self, entity_collection) -> TypedContext:... 

class TypedContextLink(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.from: TypedContext = TypedContext 
        self.from_id: str = str() 
        self.id: str = str() 
        self.lag: float = float() 
        self.metadata: typing.List = [Metadata] 
        self.to: TypedContext = TypedContext 
        self.to_id: str = str() 
        self.type: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TypedContextLink:... 
    def by_id(self, target, *ids) -> Query(TypedContextLink):... 
    def by_metadata(self, target, *dictionaries) -> Query(TypedContextLink):... 
    def create(self) -> TypedContextLink:... 
    def create_batch(self, *attributes) -> TypedContextLink:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> TypedContextLink:... 
    def get_all(self, projections=None) -> TypedContextLink:... 
    def get_first(self, projections=None) -> TypedContextLink:... 
    def get_inputs(self, projections=None) -> TypedContextLink:... 
    def get_one(self, projections=None) -> TypedContextLink:... 
    def get_outputs(self, projections=None) -> TypedContextLink:... 
    def inject(self, filter) -> Query(TypedContextLink):... 
    def not_by_id(self, target, *ids) -> Query(TypedContextLink):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(TypedContextLink):... 

class TypedContextList(List):
    def __init__(self, *args, **kwargs) -> None: 
        self.category: ListCategory = ListCategory 
        self.category_id: str = str() 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.date: str = str() 
        self.id: str = str() 
        self.is_open: bool = bool() 
        self.items: Task = Task 
        self.name: str = str() 
        self.owner: User = User 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.system_type: str = str() 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TypedContextList:... 
    def by_id(self, target, *ids) -> Query(TypedContextList):... 
    def by_metadata(self, target, *dictionaries) -> Query(TypedContextList):... 
    def by_name(self, target, *names) -> Query(TypedContextList):... 
    def create(self) -> TypedContextList:... 
    def create_batch(self, *attributes) -> TypedContextList:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> TypedContextList:... 
    def get_all(self, projections=None) -> TypedContextList:... 
    def get_first(self, projections=None) -> TypedContextList:... 
    def get_inputs(self, projections=None) -> TypedContextList:... 
    def get_one(self, projections=None) -> TypedContextList:... 
    def get_outputs(self, projections=None) -> TypedContextList:... 
    def inject(self, filter) -> Query(TypedContextList):... 
    def not_by_id(self, target, *ids) -> Query(TypedContextList):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(TypedContextList):... 
    def not_by_name(self, target, *names) -> Query(TypedContextList):... 

class TypedContextStatusChange:
    def __init__(self, *args, **kwargs) -> None: 
        self.date: str = str() 
        self.from_status: Status = Status 
        self.from_status_id: str = str() 
        self.id: str = str() 
        self.parent: TypedContext = TypedContext 
        self.parent_id: str = str() 
        self.parent_type: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> TypedContextStatusChange:... 

class TypedContextStatusRuleGroup:
    def __init__(self, *args, **kwargs) -> None: 
        self.entity_type: str = str() 
        self.id: str = str() 
        self.object_type: ObjectType = ObjectType 
        self.object_type_id: str = str() 
        self.role: SecurityRole = SecurityRole 
        self.role_id: str = str() 
        self.schema: ProjectSchema = ProjectSchema 
        self.schema_id: str = str() 
        self.status: Status = Status 
        self.status_id: str = str() 
        self.status_rules: StatusRule = StatusRule 


class User(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.allocations: Appointment = Appointment 
        self.appointments: Appointment = Appointment 
        self.assignments: Appointment = Appointment 
        self.custom_attribute_links: typing.List = [CustomAttributeLink] 
        self.custom_attribute_links_from: typing.List = [CustomAttributeLinkFrom] 
        self.dashboard_resources: DashboardResource = DashboardResource 
        self.email: str = str() 
        self.first_name: str = str() 
        self.id: str = str() 
        self.is_active: bool = bool() 
        self.is_otp_enabled: bool = bool() 
        self.is_totp_enabled: bool = bool() 
        self.last_name: str = str() 
        self.memberships: Membership = Membership 
        self.metadata: typing.List = [Metadata] 
        self.require_details_update: bool = bool() 
        self.resource_type: str = str() 
        self.thumbnail: Component = Component 
        self.thumbnail_id: str = str() 
        self.thumbnail_url: object 
        self.timelogs: Timelog = Timelog 
        self.user_security_roles: UserSecurityRole = UserSecurityRole 
        self.user_type: UserType = UserType 
        self.user_type_id: str = str() 
        self.username: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> User:... 
    def by_active_state(self, target, *states) -> Query(User):... 
    def by_id(self, target, *ids) -> Query(User):... 
    def by_metadata(self, target, *dictionaries) -> Query(User):... 
    def by_name(self, target, *names) -> Query(User):... 
    def create(self) -> User:... 
    def create_batch(self, *attributes) -> User:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> User:... 
    def get_all(self, projections=None) -> User:... 
    def get_first(self, projections=None) -> User:... 
    def get_inputs(self, projections=None) -> User:... 
    def get_one(self, projections=None) -> User:... 
    def get_outputs(self, projections=None) -> User:... 
    def inject(self, filter) -> Query(User):... 
    def not_by_active_state(self, target, *states) -> Query(User):... 
    def not_by_id(self, target, *ids) -> Query(User):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(User):... 
    def not_by_name(self, target, *names) -> Query(User):... 

class UserApplicationState:
    def __init__(self, *args, **kwargs) -> None: 
        self.key: str = str() 
        self.user_id: str = str() 
        self.value: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserApplicationState:... 

class UserCustomAttributeLink:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 
        self.user: User = User 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserCustomAttributeLink:... 

class UserCustomAttributeLinkFrom:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeLinkConfiguration = CustomAttributeLinkConfiguration 
        self.configuration_id: str = str() 
        self.from_entity_type: str = str() 
        self.from_id: str = str() 
        self.id: str = str() 
        self.to_entity_type: str = str() 
        self.to_id: str = str() 
        self.user: User = User 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserCustomAttributeLinkFrom:... 

class UserCustomAttributeValue:
    def __init__(self, *args, **kwargs) -> None: 
        self.configuration: CustomAttributeConfiguration = CustomAttributeConfiguration 
        self.configuration_id: str = str() 
        self.entity_id: str = str() 
        self.key: str = str() 
        self.value: typing.Any = None 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserCustomAttributeValue:... 

class UserSecurityRole(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.is_all_open_projects: bool = bool() 
        self.is_all_projects: bool = bool() 
        self.security_role: SecurityRole = SecurityRole 
        self.security_role_id: str = str() 
        self.user: User = User 
        self.user_id: str = str() 
        self.user_security_role_projects: UserSecurityRoleProject = UserSecurityRoleProject 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserSecurityRole:... 
    def by_id(self, target, *ids) -> Query(UserSecurityRole):... 
    def by_metadata(self, target, *dictionaries) -> Query(UserSecurityRole):... 
    def create(self) -> UserSecurityRole:... 
    def create_batch(self, *attributes) -> UserSecurityRole:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> UserSecurityRole:... 
    def get_all(self, projections=None) -> UserSecurityRole:... 
    def get_first(self, projections=None) -> UserSecurityRole:... 
    def get_inputs(self, projections=None) -> UserSecurityRole:... 
    def get_one(self, projections=None) -> UserSecurityRole:... 
    def get_outputs(self, projections=None) -> UserSecurityRole:... 
    def inject(self, filter) -> Query(UserSecurityRole):... 
    def not_by_id(self, target, *ids) -> Query(UserSecurityRole):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(UserSecurityRole):... 

class UserSecurityRoleProject(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.project: Project = Project 
        self.project_id: str = str() 
        self.user_security_role: UserSecurityRole = UserSecurityRole 
        self.user_security_role_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserSecurityRoleProject:... 
    def by_id(self, target, *ids) -> Query(UserSecurityRoleProject):... 
    def by_metadata(self, target, *dictionaries) -> Query(UserSecurityRoleProject):... 
    def create(self) -> UserSecurityRoleProject:... 
    def create_batch(self, *attributes) -> UserSecurityRoleProject:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> UserSecurityRoleProject:... 
    def get_all(self, projections=None) -> UserSecurityRoleProject:... 
    def get_first(self, projections=None) -> UserSecurityRoleProject:... 
    def get_inputs(self, projections=None) -> UserSecurityRoleProject:... 
    def get_one(self, projections=None) -> UserSecurityRoleProject:... 
    def get_outputs(self, projections=None) -> UserSecurityRoleProject:... 
    def inject(self, filter) -> Query(UserSecurityRoleProject):... 
    def not_by_id(self, target, *ids) -> Query(UserSecurityRoleProject):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(UserSecurityRoleProject):... 

class UserType:
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> UserType:... 

class UserView:
    def __init__(self, *args, **kwargs) -> None: 
        self.global: bool = bool() 
        self.id: str = str() 
        self.name: str = str() 
        self.shared_with: Resource = Resource 
        self.user: User = User 
        self.user_id:  =  


class WorkflowSchema(Entity):
    def __init__(self, *args, **kwargs) -> None: 
        self.id: str = str() 
        self.name: str = str() 
        self.overrides: ProjectSchemaOverride = ProjectSchemaOverride 
        self.statuses: Status = Status 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> WorkflowSchema:... 
    def by_id(self, target, *ids) -> Query(WorkflowSchema):... 
    def by_metadata(self, target, *dictionaries) -> Query(WorkflowSchema):... 
    def create(self) -> WorkflowSchema:... 
    def create_batch(self, *attributes) -> WorkflowSchema:... 
    def delete(self) -> None:... 
    def from_entity_type(cls, name, ftrack_entity=None) -> typing.Any:... 
    def get(self, projections=None, limit=None, offset=0, order="ascending", order_by=None) -> WorkflowSchema:... 
    def get_all(self, projections=None) -> WorkflowSchema:... 
    def get_first(self, projections=None) -> WorkflowSchema:... 
    def get_inputs(self, projections=None) -> WorkflowSchema:... 
    def get_one(self, projections=None) -> WorkflowSchema:... 
    def get_outputs(self, projections=None) -> WorkflowSchema:... 
    def inject(self, filter) -> Query(WorkflowSchema):... 
    def not_by_id(self, target, *ids) -> Query(WorkflowSchema):... 
    def not_by_metadata(self, target, *dictionaries) -> Query(WorkflowSchema):... 

class WorkflowSchemaStatus:
    def __init__(self, *args, **kwargs) -> None: 
        self.status_id: str = str() 
        self.workflow_schema_id: str = str() 

    def __getitem__(self, item: typing.Union[int, slice, str]) -> WorkflowSchemaStatus:... 

